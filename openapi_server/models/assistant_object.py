# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.assistant_object_tools_inner import AssistantObjectToolsInner


class AssistantObject(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    AssistantObject - a model defined in OpenAPI

        id: The id of this AssistantObject.
        object: The object of this AssistantObject.
        created_at: The created_at of this AssistantObject.
        name: The name of this AssistantObject.
        description: The description of this AssistantObject.
        model: The model of this AssistantObject.
        instructions: The instructions of this AssistantObject.
        tools: The tools of this AssistantObject.
        file_ids: The file_ids of this AssistantObject.
        metadata: The metadata of this AssistantObject.
    """

    id: str = Field(alias="id")
    object: str = Field(alias="object")
    created_at: int = Field(alias="created_at")
    name: Optional[str] = Field(alias="name")
    description: Optional[str] = Field(alias="description")
    model: str = Field(alias="model")
    instructions: Optional[str] = Field(alias="instructions")
    tools: Optional[List[AssistantObjectToolsInner]] = Field(alias="tools")
    file_ids: Optional[List[str]] = Field(alias="file_ids")
    metadata: Optional[Dict[str, Any]] = Field(alias="metadata")

    @validator("name")
    def name_max_length(cls, value):
        if value is not None and len(value) > 256:
            raise ValueError("name must be 256 characters or fewer")
        return value

    @validator("description")
    def description_max_length(cls, value):
        if value is not None and len(value) > 512:
            raise ValueError("description must be 512 characters or fewer")
        return value

    @validator("instructions")
    def instructions_max_length(cls, value):
        if value is not None and len(value) > 32768:
            raise ValueError("instructions must be 32768 characters or fewer")
        return value

AssistantObject.update_forward_refs()
