# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.create_completion_request_model import CreateCompletionRequestModel
from openapi_server.models.create_completion_request_prompt import CreateCompletionRequestPrompt
from openapi_server.models.create_completion_request_stop import CreateCompletionRequestStop


class CreateCompletionRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    CreateCompletionRequest - a model defined in OpenAPI

        model: The model of this CreateCompletionRequest.
        prompt: The prompt of this CreateCompletionRequest.
        best_of: The best_of of this CreateCompletionRequest [Optional].
        echo: The echo of this CreateCompletionRequest [Optional].
        frequency_penalty: The frequency_penalty of this CreateCompletionRequest [Optional].
        logit_bias: The logit_bias of this CreateCompletionRequest [Optional].
        logprobs: The logprobs of this CreateCompletionRequest [Optional].
        max_tokens: The max_tokens of this CreateCompletionRequest [Optional].
        n: The n of this CreateCompletionRequest [Optional].
        presence_penalty: The presence_penalty of this CreateCompletionRequest [Optional].
        seed: The seed of this CreateCompletionRequest [Optional].
        stop: The stop of this CreateCompletionRequest [Optional].
        stream: The stream of this CreateCompletionRequest [Optional].
        suffix: The suffix of this CreateCompletionRequest [Optional].
        temperature: The temperature of this CreateCompletionRequest [Optional].
        top_p: The top_p of this CreateCompletionRequest [Optional].
        user: The user of this CreateCompletionRequest [Optional].
    """

    model: str = Field(alias="model")
    prompt: str = Field(alias="prompt")
    best_of: Optional[int] = Field(alias="best_of", default=None)
    echo: Optional[bool] = Field(alias="echo", default=None)
    frequency_penalty: Optional[float] = Field(alias="frequency_penalty", default=None)
    logit_bias: Optional[Dict[str, int]] = Field(alias="logit_bias", default=None)
    logprobs: Optional[int] = Field(alias="logprobs", default=None)
    max_tokens: Optional[int] = Field(alias="max_tokens", default=None)
    n: Optional[int] = Field(alias="n", default=None)
    presence_penalty: Optional[float] = Field(alias="presence_penalty", default=None)
    seed: Optional[int] = Field(alias="seed", default=None)
    stop: Optional[CreateCompletionRequestStop] = Field(alias="stop", default=None)
    stream: Optional[bool] = Field(alias="stream", default=None)
    suffix: Optional[str] = Field(alias="suffix", default=None)
    temperature: Optional[float] = Field(alias="temperature", default=None)
    top_p: Optional[float] = Field(alias="top_p", default=None)
    user: Optional[str] = Field(alias="user", default=None)

    @validator("best_of")
    def best_of_max(cls, value):
        assert value <= 20
        return value

    @validator("best_of")
    def best_of_min(cls, value):
        assert value >= 0
        return value

    @validator("frequency_penalty")
    def frequency_penalty_max(cls, value):
        assert value <= 2
        return value

    @validator("frequency_penalty")
    def frequency_penalty_min(cls, value):
        assert value >= -2
        return value

    @validator("logprobs")
    def logprobs_max(cls, value):
        assert value <= 5
        return value

    @validator("logprobs")
    def logprobs_min(cls, value):
        assert value >= 0
        return value

    @validator("max_tokens")
    def max_tokens_min(cls, value):
        assert value >= 0
        return value

    @validator("n")
    def n_max(cls, value):
        assert value <= 128
        return value

    @validator("n")
    def n_min(cls, value):
        assert value >= 1
        return value

    @validator("presence_penalty")
    def presence_penalty_max(cls, value):
        assert value <= 2
        return value

    @validator("presence_penalty")
    def presence_penalty_min(cls, value):
        assert value >= -2
        return value

    @validator("seed")
    def seed_max(cls, value):
        assert value <= 9223372036854775807
        return value

    @validator("seed")
    def seed_min(cls, value):
        assert value >= -9223372036854775808
        return value

    @validator("temperature")
    def temperature_max(cls, value):
        assert value <= 2
        return value

    @validator("temperature")
    def temperature_min(cls, value):
        assert value >= 0
        return value

    @validator("top_p")
    def top_p_max(cls, value):
        assert value <= 1
        return value

    @validator("top_p")
    def top_p_min(cls, value):
        assert value >= 0
        return value

CreateCompletionRequest.update_forward_refs()
