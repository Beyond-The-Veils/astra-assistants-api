# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.assistant_object_tools_inner import AssistantObjectToolsInner


class CreateAssistantRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    CreateAssistantRequest - a model defined in OpenAPI

        model: The model of this CreateAssistantRequest.
        name: The name of this CreateAssistantRequest [Optional].
        description: The description of this CreateAssistantRequest [Optional].
        instructions: The instructions of this CreateAssistantRequest [Optional].
        tools: The tools of this CreateAssistantRequest [Optional].
        file_ids: The file_ids of this CreateAssistantRequest [Optional].
        metadata: The metadata of this CreateAssistantRequest [Optional].
    """

    model: str = Field(alias="model")
    name: Optional[str] = Field(alias="name", default=None)
    description: Optional[str] = Field(alias="description", default=None)
    instructions: Optional[str] = Field(alias="instructions", default=None)
    tools: Optional[List[AssistantObjectToolsInner]] = Field(alias="tools", default=None)
    file_ids: Optional[List[str]] = Field(alias="file_ids", default=None)
    metadata: Optional[Dict[str, Any]] = Field(alias="metadata", default=None)

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 512
        return value

    @validator("instructions")
    def instructions_max_length(cls, value):
        assert len(value) <= 32768
        return value

CreateAssistantRequest.update_forward_refs()
